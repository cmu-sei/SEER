@*
    SEER - SYSTEM (for) EVENT EVALUATION RESEARCH
    Copyright 2021 Carnegie Mellon University.
    NO WARRANTY. THIS CARNEGIE MELLON UNIVERSITY AND SOFTWARE ENGINEERING INSTITUTE MATERIAL IS FURNISHED ON AN "AS-IS" BASIS. CARNEGIE MELLON UNIVERSITY MAKES NO WARRANTIES OF ANY KIND, EITHER EXPRESSED OR IMPLIED, AS TO ANY MATTER INCLUDING,
    BUT NOT LIMITED TO, WARRANTY OF FITNESS FOR PURPOSE OR MERCHANTABILITY, EXCLUSIVITY, OR RESULTS OBTAINED FROM USE OF THE MATERIAL. CARNEGIE MELLON UNIVERSITY DOES NOT MAKE ANY WARRANTY OF ANY KIND WITH RESPECT TO FREEDOM FROM PATENT,
    TRADEMARK, OR COPYRIGHT INFRINGEMENT.
    Released under a MIT (SEI)-style license, please see license.txt or contact permission@sei.cmu.edu for full terms.
    [DISTRIBUTION STATEMENT A] This material has been approved for public release and unlimited distribution. Please see Copyright notice for non-US Government use and distribution.
    Carnegie Mellon® and CERT® are registered in the U.S. Patent and Trademark Office by Carnegie Mellon University.
    DM21-0384
*@

@model Seer.Infrastructure.Models.QuizQuestion
@using Seer.Infrastructure.Models

<div class="form-group row">
    @Html.LabelFor(model => model.Index, new { @class = "control-label col-md-2" })
    <div>
        @Html.EditorFor(model => model.Index, new { htmlAttributes = new { @class = "form-control" } })
        @Html.ValidationMessageFor(model => model.Index, "", new { @class = "text-danger" })
    </div>
</div>
<div class="form-group row">
    @Html.LabelFor(model => model.Body, new { @class = "col-2 col-form-label" })
    <div>
        @Html.TextAreaFor(model => model.Body, rows: 8, 20, new { @class = "form-control" })
        @Html.ValidationMessageFor(model => model.Body, null, new { @class = "help-inline" })
    </div>
</div>
<div class="form-group row">
    @Html.LabelFor(model => model.Type, new { @class = "col-2 col-form-label" })
    <div>
        @Html.DropDownListFor(model => model.Type, new[] { QuizQuestion.QuestionType.MultipleChoice, QuizQuestion.QuestionType.Text }.Select(n => new SelectListItem { Text = n.ToString() }), new { @class = "form-control" })
    </div>
</div>
<div class="form-group row">
    @Html.LabelFor(model => model.BodyFormat, new { @class = "col-2 col-form-label" })
    <div>
        @Html.DropDownListFor(model => model.BodyFormat, new[] { QuizQuestion.TextFormatType.PlainText, QuizQuestion.TextFormatType.MarkDown }.Select(n => new SelectListItem { Text = n.ToString() }), new { @class = "form-control" })
    </div>
</div>
<div class="form-group row">
    <label class="col-2 col-form-label">Mulitple Choice Answers</label>
    <div>
        <div class="control-group">
            <div class="controls">
                <span class="label label-info about-option-image">
                    * Answer choices ... Even if it is indicated only by images, be sure to also enter text such as "Figure 1".
                </span>
                <span class="label label-warning disability-option-image-setup">
                    * Sorry, you can not set images with your browser.
                    <br />
                    If you need images in answer choices, please use the latest version or other browsers.
                </span>
            </div>
        </div>

        @foreach (var option in Model.GetOptions(trim: false))
        {
            var modelName = "Option" + option.OptionNumber;
            var imageModelName = "OptionImage" + option.OptionNumber;
            <div class="control-group">
                @Html.Label(modelName, "", new { @class = "control-label" })
                <div class="controls">
                    <div>
                        @Html.TextBox(modelName, option.Option, new { @class = "form-control" })
                        @Html.ValidationMessage(modelName, new { @class = "help-inline" })
                        @Html.Hidden(imageModelName, option.OptionImage, new { @class = "option-image-hidden" })
                    </div>
                    <div class="@((string.IsNullOrEmpty(option.OptionImage) ? "no-image" : "") + " image-holder")">
                        <img id="@(modelName + "Image")" src="@option.OptionImage" class="option-image" alt="Option" />
                        <div class="image-actions">
                            <div class="btn-add-image">
                                <a href="#" class="btn add-image">Set image</a>
                                <input type="file" id="@("_" + modelName + "ImageFile")" class="option-image-file" tabindex="-1" />
                            </div>
                            <a href="#" class="btn remove-image">Delete image</a>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
</div>
<div class="form-group row">
    @Html.LabelFor(model => model.CorrectIndex, new { @class = "col-2 col-form-label" })
    <div>
        @Html.DropDownListFor(model => model.CorrectIndex, Enumerable.Range(1, 6).Select(n => new SelectListItem { Text = n.ToString() }), new { @class = "form-control" })
        @Html.ValidationMessageFor(model => model.CorrectIndex, null, new { @class = "help-inline" })
    </div>
</div>
<div class="form-group row">
    @Html.LabelFor(model => model.CorrectText, new { @class = "col-2 col-form-label" })
    <div>
        @Html.TextBoxFor(model => model.CorrectText, new {@class="form-control"})
        @Html.ValidationMessageFor(model => model.CorrectText, null, new { @class = "help-inline" })
    </div>
</div>
<div class="form-group row">
    @Html.LabelFor(model => model.Comment, new { @class = "col-2 col-form-label" })
    <div>
        @Html.TextAreaFor(model => model.Comment, rows: 8, columns: 20, htmlAttributes: new { @class = "form-control" })
        @Html.ValidationMessageFor(model => model.Comment, null, new { @class = "help-inline" })
    </div>
</div>
<div class="form-group row">
    @Html.LabelFor(model => model.CommentFormat, new { @class = "col-2 col-form-label" })
    <div>
        @Html.DropDownListFor(model => model.CommentFormat, new[] { QuizQuestion.TextFormatType.PlainText, QuizQuestion.TextFormatType.MarkDown }.Select(n => new SelectListItem { Text = n.ToString() }), new { @class = "form-control" })
    </div>
</div>

@Html.HiddenFor(model => Model.QuizId)
